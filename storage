/*
 *  Storage - EchoSistant Add-on
 *
 *  Copyright 2018 EchoSistant Team (Anthony Santilli, Corey Lista, Jason Headley, Bobby Dobrescu)
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
/**********************************************************************************************************************************************/
import groovy.json.JsonSlurper

definition(
	name			: "ES-Storage",
    namespace		: "Echo",
    author			: "JH/BD",
	description		: "EchoSistant5 Storage Module Add-In\n\nDO NOT Install Through Marketplace\n\nThis app is Automatically installed when you open EchoSistant5 SmartApp.",
	category		: "My Apps",
    parent			: "Echo:EchoSistant5",
	iconUrl         : "https://echosistant.com/es5_content/images/es5_storage.png",
    iconX2Url       : "https://echosistant.com/es5_content/images/es5_storage.png",
    iconX3Url       : "https://echosistant.com/es5_content/images/es5_storage.png")
/**********************************************************************************************************************************************/
preferences { }

private releaseVer() { return "5.0.0104" }
private appVerDate() { "1-04-2018" }
private moduleType() { return "storage" }

private installed() {
	initialize()
}

private updated() {
	log.trace "${app?.getLabel()} updated..."
	initialize()
}

private initialize() {
	log.debug "Initialized (${app.label}) | Storage Version: (${releaseVer()})"
	stateCleanup()
}

def getStateSize()	{ return state?.toString().length() }
def getStateSizePerc()  { return (int) ((state?.toString().length() / 100000)*100).toDouble().round(0) }

def getSettingsData() {
	def sets = []
	settings?.sort().each { st ->
		sets << st
	}
	return sets
}

def getSettingVal(var) {
	return settings[var] ?: null
}

def getStateVal(var) {
	return state[var] ?: null
}

void settingUpdate(name, value, type=null) {
    log.trace("settingUpdate($name, $value, $type)...")
    if(name && type) { app?.updateSetting("$name", [type: "$type", value: value]) }
    else if (name && type == null) { app?.updateSetting(name.toString(), value) }
}

def stateUpdate(sKey, sValue) {
    if(sKey && sValue) {
		log.info "Updating State Value (${sKey}) with | ${sValue}"
        atomicState?."${sKey}" = sValue
        return true
    } else { return false }
}

def stateCleanup() {
	log.trace "stateCleanup"
	def data = [ "selectedDevMap" ]
	data.each { item ->
		state.remove(item?.toString())
	}
}

def getRoomDataById(rmId) {
	def rmData = atomicState?.stRoomMap
	return rmData?.find {it?.id} ?: null
}

def getRoomNameById(rmId) {
	def rmData = atomicState?.stRoomMap
	def room = rmData?.find {it?.id}
	return room?.id ?: null
}
